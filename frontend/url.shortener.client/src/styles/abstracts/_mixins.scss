// src/styles/abstracts/_mixins.scss

// Import Sass modules to fix deprecation warnings
@use 'sass:map';

// Responsive breakpoints
$breakpoints: (
  'sm': 640px,
  'md': 768px,
  'lg': 1024px,
  'xl': 1280px
) !default;

// =============================================================================
// CONTAINER MIXIN
// =============================================================================

@mixin container {
  width: 100%;
  margin: 0 auto;
  padding: 0 var(--space-md, 1rem);

  @include respond-to('sm') {
    max-width: 640px;
  }

  @include respond-to('md') {
    max-width: 768px;
  }

  @include respond-to('lg') {
    max-width: 1024px;
    padding: 0 var(--space-lg, 1.5rem);
  }

  @include respond-to('xl') {
    max-width: 1280px;
  }
}

// =============================================================================
// RESPONSIVE MIXINS
// =============================================================================

@mixin respond-to($breakpoint) {
  @if map.has-key($breakpoints, $breakpoint) {
    @media (min-width: map.get($breakpoints, $breakpoint)) {
      @content;
    }
  } @else {
    @warn "Invalid breakpoint: #{$breakpoint}. Available breakpoints: #{map.keys($breakpoints)}";
  }
}

// Enhanced version with direction support
@mixin respond-to-advanced($breakpoint, $direction: 'up') {
  @if map.has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map.get($breakpoints, $breakpoint);

    @if $direction == 'up' {
      @media (min-width: $breakpoint-value) {
        @content;
      }
    } @else if $direction == 'down' {
      @media (max-width: ($breakpoint-value - 1px)) {
        @content;
      }
    }
  } @else {
    @warn "Invalid breakpoint: #{$breakpoint}. Available breakpoints: #{map.keys($breakpoints)}";
  }
}

// =============================================================================
// CONVENIENCE BREAKPOINT MIXINS
// =============================================================================

// Breakpoint up (min-width)
@mixin breakpoint-up($breakpoint) {
  @include respond-to($breakpoint) { @content; }
}

// Breakpoint down (max-width)
@mixin breakpoint-down($breakpoint) {
  @include respond-to-advanced($breakpoint, 'down') { @content; }
}

// Convenient shorthand mixins
@mixin mobile-up {
  @include respond-to('sm') { @content; }
}

@mixin tablet-up {
  @include respond-to('md') { @content; }
}

@mixin desktop-up {
  @include respond-to('lg') { @content; }
}

@mixin large-desktop-up {
  @include respond-to('xl') { @content; }
}

// Mobile-only (below sm breakpoint)
@mixin mobile-only {
  @media (max-width: 639px) { @content; }
}

// =============================================================================
// UTILITY MIXINS
// =============================================================================

// Center element with flexbox
@mixin flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

// Visually hide element but keep it accessible
@mixin sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

// Clear float
@mixin clearfix {
  &::after {
    content: '';
    display: table;
    clear: both;
  }
}

// =============================================================================
// USAGE EXAMPLES:
// =============================================================================
// @include container;
// @include respond-to('md') { ... }
// @include respond-to-advanced('lg', 'down') { ... }
// @include breakpoint-up('md') { ... }
// @include breakpoint-down('lg') { ... }
// @include tablet-up { ... }
// @include mobile-only { ... }
// @include flex-center;
